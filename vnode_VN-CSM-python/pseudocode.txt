JOIN agent (join.py):
	
	STARTUP state (on going to a new region?)
		periodically broadcast LEADER_REQUEST to region
			if timeout expires without response:
				contact central server
				if receive reply OKAY from central server (server only replies if no VN running in that region)
					fetch up-to-date VN state from central server
					tell server VN is now running in that region
					become LEADER and start VN and go into LEADER state
		
		upon receive LEADER_REPLY from a leader in the same region within timeout:
			become NON_LEADER	
	
	LEADER state:
		periodically broadcast HEARTBEAT message
		
		upon hearing LEADER_REQUEST broadcast from NON-LEADER in the same region:
			send LEADER_REPLY, CONSENT (no, you cannot be a leader, but you can join this region)
		
		upon leaving a region:
			broadcast LEADER_ELECT to old region
			
			if receive LEADER_REQUEST_REMOTE messages (containing state version #'s) from non-leaders in old region we just left:
				if there is a non-leader / replica with the same state version #:
					send LEADER_ACK_REMOTE to it
				else:
					select any non-leader with a LEADER_ACK including a copy of the shared data / VN state
					
			else if not able to elect new leader after multiple retries:
				upload VN state to central server (next node to enter region fetches VN state as in UNKNOWN)
				tell server VN is no longer running in that region
	
	
	NON-LEADER / UNKNOWN state:
		periodically check HEARTBEAT count
		
	 	upon not receiving enough HEARTBEATs from leader:
			broadcast LEADER_REQUEST to region
			if receive LEADER_REPLY from a leader in the region within timeout:
				remain NON-LEADER
			else:
				contact central server
				if receive reply / OKAY from central server (server only replies if no VN running in that region)
					fetch up-to-date VN state from central server
					tell server VN is now running in that region
					become LEADER and start VN and go into LEADER state
		
		upon hearing LEADER_ELECT broadcast from leader that is leaving:
			status = PENDING
			send LEADER_REQUEST_REMOTE (including VN state version #) to leaving leader, who is now in a different region
			
			if receive LEADER_ACK_REMOTE unicast from previous leader (who is in different region):
				if status = PENDING:
					start being a LEADER, status = LEADER
					send LEADER_ACK_ACK to previous leader
					tell central server there is a new leader?
			else if receive
				...



VNSERVER Agent (both vnserver.py and parkingserver.py):

	#consistency manager states
	UNKNOWN = -1                      #the initial state, dead node
	NEWNODE = 0                       #a new node in a region
	SYNC =    1                       #non-leader node just get in a region
	INIT =    2                       #leader node just get in a region
	SERVER =  3                       #a leader node initialized
	BACKUP =  4                       #a non-leader node who got its states synchronized with the leader already
	MSGSYNC = 5                       #sync caused by message sequence inconsistency

	UNKNOWN state (upon entering a new region):
		self.sending_state_ = NOSENDING;
		self.state_ = NEWNODE;
		self.leader_ = UNKNOWN;
		self.leader_status_ = UNKNOWN;
		self.first_node_ = False; #new node to the region
		clear queue
	
	upon receiving a packet:
		if it's a LEADER_MSG (loopback from JOIN Agent that means a leader change occurred):
			if message subtype is NEWLEADER:
				ensure
				self.leader_status_ = LEADER
				self.leader_ = self.nodeID_
				???
			else if message subtype is NONLEADER:
				self.leader_status_ = NONLEADER
				self.leader_ = vnhdr.dst?? should be src

				if we are the first node:
					set first node deadline to t+5 seconds

				if we are a NEWNODE:
					initialize server
					go into SYNC state
					self.sync()
		
		else if it's a  REGION_MSG:NEWREGION (loopback from JOIN Agent that means we entered a new region):
			update our internal regionX_, regionY_ region tracking variables
			figure out who our neighbors are and set them as inactive / active / invalid / valid correctly - setNeighbors()
			go back into UNKNOWN state with UNKNOWN leader, etc.
			set first_node_deadline_ to t+5
		
		else if it's a SYNC_MSG:
			if it's a SYNC_REQUEST and we're SERVER, and it's past time for the next synchronization:
				broadcast a SYNC_ACK with the state data to the non-servers in the region
			if it's a SYNC_ACK and we're SYNC or MSGSYNC state:
				update our own internal state with the server's (contained in the SYNC_ACK packet)
				now we become a BACKUP
				send a ST_SYNCED loopback message to VNClient Agent and Join Agent.
		
		else if it's an APPL_MSG (application layer message) from our region (ignore other regions' app messages)
			if we're the server, or we're a backup and we want to stay in lockstep / sync:
				if we are doing Total Ordering:
					put it into the total ordered input queue, which is periodically checked and passed off to consistencyManager eventually
				else:
					pass it off to consistencyManager immediately for handling correctly, (as if / since we're serving the request)
	
	### application specific (e.g. parkingserver.py)
	upon invoking consistencyManager to handle an application layer packet:



VNCLIENT Agent (both vnclient.py and parkingclient.py):

	upon receiving a packet:
		if it's a LEADER_MSG (loopback from JOIN Agent that means a leader change occurred):
			update our self.leader_status_ to LEADER (if message subtype was NEWLEADER) or NONLEADER (if message subtype was NONLEADER)
				
		if it's a  REGION_MSG:NEWREGION (loopback from JOIN Agent that means we entered a new region):
			update our internal regionX_, regionY_ region tracking variables
			init() (app specific) if we are in UNKNOWN state
			reset() (app specific) otherwise
		
		if it's an APPL_MSG (application layer message) from our region (ignore other regions' app messages for vnclient?)
			if we're NOT in the UNKNOWN state:
				handle the packet according to application specific handle_packet function (e.g. in parkingclient.py)
				trigger a timer to send packets in the send queue, if necessary (send_packets())

		### application specific (e.g. parkingclient.py)
		upon receiving packet for application specific handle_packet:
			ensure packet is for our region, is of type APPL_MSG, and originated from this node? (hdr.origid == self.nodeID_):
			log hop times?
			removeClientRequest(self.nodeID_, hdr.m_count); ?